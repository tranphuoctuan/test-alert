name: ci-web

on:
  pull_request:
    paths:
      - "web/**"
      - "package.json"
      - "web/package.json"


jobs:
  ci-web:
    runs-on: ubuntu-latest
    needs: set-env
    outputs:
      stageName: ${{ needs.set-env.outputs.stageName}}
      awsRoleArn: ${{ needs.set-env.outputs.awsRoleArn}}
      job-status: ${{ job.status}}
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "npm"

      - name: Cache node_modules directory
        uses: actions/cache@v4
        id: node_modules_cache
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-web-ci-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies if cache does not exist
        if: ${{ steps.node_modules_cache.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: Cache playwright Docker image
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ${{ env.PLAYWRIGHT_CACHE_PATH }}
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Pull and save playwright Docker images
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: |
          docker pull mcr.microsoft.com/playwright:${PLAYWRIGHT_VERSION}
          docker save mcr.microsoft.com/playwright:${PLAYWRIGHT_VERSION} -o ${PLAYWRIGHT_CACHE_PATH}

      - name: Load Docker images
        run: |
          docker load -i ${PLAYWRIGHT_CACHE_PATH}

      - name: Generate types
        run: npm run codegen -w web

      - name: Generate config
        run: npm run config:$STAGE_NAME -w web
        env:
          STAGE_NAME: ${{ needs.set-env.outputs.stageName }}

      - name: Check lint
        run: |
          npm run validate -w web
          npm run validate:cspell

      - name: Run build
        run: npm run build -w web

      - name: Run tests
        run: |
          npx playwright install
          npm run $STAGE_NAME:test -w web & # バックグラウンド実行
          npm run test:ci -w web
          npm run test:hooks -w web
        env:
          STAGE_NAME: ${{ needs.set-env.outputs.stageName }}

      - name: Upload report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-snapshot-result
          path: web/test-results/
          retention-days: 1

      - name: simulator failure
        run: exit 1

     trigger-alert-web:
        needs: ci-web
        if: always()
        uses: ./.github/workflows/alert-github-action.yaml
        with:
            stageName: ${{ needs.ci-web.outputs.stageName }}
            awsRoleArn: ${{ needs.ci-web.outputs.awsRoleArn}}
            job-status: ${{ needs.ci-web.outputs.job-status}}